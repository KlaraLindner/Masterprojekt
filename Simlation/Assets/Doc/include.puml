@startuml
abstract class WorldObject {
    + {abstract} LN() : string
    + {abstract} MouseClick() : void
    + {abstract} MouseOver() : void
    + {abstract} MouseExit() : void
}
ILog <|-- WorldObject
IMouseListener <|-- WorldObject
WorldObject --> "ground" Ground
WorldObject --> "world" WorldController
abstract class Agent {
    + moveAble : bool
    + alive : bool = true
    + domain : string = "Unknown"
    + kingdom : string = "Unknown"
    + phylum : string = "Unknown"
    + agentClass : string = "Unknown"
    + order : string = "Unknown"
    + family : string = "Unknown"
    + genus : string = "Unknown"
    + species : string = "Unknown"
    + o2Modifier : float
    + co2Modifier : float
    + size : float
    + age : float
    + diurnal : bool = true
    + health : int = 0
    + thirst : int = 0
    + {abstract} OnDamage(s:object, e:GenEventArgs<int>) : void
    + {abstract} OnConsumption(s:object, e:EventArgs) : void
    + {abstract} OnHandle(world:WorldController) : void
    + OnDeath(s:object, e:EventArgs) : void
    + OnAfterDeath(s:object, e:EventArgs) : void
}
class AgentNotFoundException {
    + <<new>> Message : string = "The selected object has no agent component"
}
WorldObject <|-- Agent
Agent --> "behaviour" IAgentBehaviour
MissingComponentException <|-- AgentNotFoundException
abstract class CarnivoreBehaviour {
    + Current() : IAgentBehaviour.States
    + Next() : Func<IAgentBehaviour.States, IAgentBehaviour.States>
    # {abstract} FightAsPack(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} Fight(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} Flee(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} Socialize(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} GetGroup(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} Breeding(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} GetPartner(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} Awake(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} Sleep(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} GetSleepingPlace(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} Drink(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} GetWater(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} Eat(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} GetFood(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} GetStatus(arg:IAgentBehaviour.States) : IAgentBehaviour.States
}
IAgentBehaviour <|-- CarnivoreBehaviour
abstract class FaunaAgent {
    + hunger : int
    + offspring : int = 1
    + gestationDuration : float
    + timeToMature : float
    + ch4Modifier : float
    + weight : float
    + temperature : float = 24.5f
    + maxPossibleSpeed : float
    + maxPossibleHealth : float
    + smellRadius : float = 1
    + listingRadius : float = 1
    + visionRadius : float = 1
    + cannibalism : bool = false
    # FaunaAgent()
    - Awake() : void
    # {abstract} OnSee(obj:GameObject) : void
    # {abstract} OnSeeRadius(obj:GameObject) : void
    # {abstract} OnSeeRadiusExit(obj:GameObject) : void
    # {abstract} OnHear(obj:GameObject) : void
    # {abstract} OnHearRadius(obj:GameObject) : void
    # {abstract} OnHearRadiusExit(obj:GameObject) : void
    # {abstract} OnSmell(obj:GameObject) : void
    # {abstract} OnSmellRadius(obj:GameObject) : void
    # {abstract} OnSmellRadiusExit(obj:GameObject) : void
    # {abstract} OnFoodFood(obj:GameObject) : void
    + <<override>> MouseClick() : void
    + <<override>> MouseOver() : void
    + <<override>> MouseExit() : void
    + <<override>> OnDamage(s:object, e:GenEventArgs<int>) : void
}
Agent <|-- FaunaAgent
FaunaAgent --> "hearSense" HearBehaviour
FaunaAgent --> "seeSense" SeeBehaviour
FaunaAgent --> "smellSense" SmellBehaviour
FaunaAgent --> "bodySense" BodyBehaviour
abstract class FloraAgent {
    + waterConsumption : float = 1
    + heatResistance : float = 1
    + dryResistance : float = 1
    + xerophyt : bool = false
    # FloraAgent(ground:Ground)
    + <<override>> OnHandle(world:WorldController) : void
    + <<override>> OnConsumption(sender:object, e:EventArgs) : void
    + <<override>> OnDamage(s:object, e:GenEventArgs<int>) : void
    + <<override>> MouseClick() : void
    + <<override>> MouseOver() : void
    + <<override>> MouseExit() : void
    + AddDisease(d:string) : void
}
Agent <|-- FloraAgent
abstract class HerbivoreBehaviour {
    + Current() : IAgentBehaviour.States
    + Next() : Func<IAgentBehaviour.States, IAgentBehaviour.States>
    # {abstract} FightAsPack(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} Fight(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} Flee(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} Socialize(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} GetGroup(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} Breeding(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} GetPartner(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} Awake(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} Sleep(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} GetSleepingPlace(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} Drink(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} GetWater(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} Eat(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} GetFood(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # {abstract} GetStatus(arg:IAgentBehaviour.States) : IAgentBehaviour.States
}
IAgentBehaviour <|-- HerbivoreBehaviour
interface IAgentBehaviour {
    + Next() : Func<States, States>
    + Current() : IAgentBehaviour.States
}
enum States {
    GetStatus,
    GetFood,
    Eat,
    GetWater,
    Drink,
    GetSleepingPlace,
    Sleep,
    Awake,
    GetPartner,
    Breeding,
    GetGroup,
    Socialize,
    FightAsPack,
    Flee,
    Fight,
}
IAgentBehaviour +-- States
abstract class TreeAgent {
    # TreeAgent(ground:Ground)
    + CutTree() : void
}
FloraAgent <|-- TreeAgent
class ClimateHandler {
    + humidity : float = 0.5f
    + airPressure : float = 1005
    + windSpeed : float = 1
    + windDirection : float = 0
    + height : float = 222
    + cloudCover : float = 0
    + waterLevel : float = 2
    + temperature : float = 24.5f
    + minDayTemperature : float = 20
    + maxDayTemperature : float = 30
    + weatherMinMultiplier : float = 0.25f
    + weatherMaxMultiplier : float = 0.35f
    +  <<event>> TemperatureChanged : EventHandler<GenEventArgs<float>> 
    +  <<event>> WeatherChanged : EventHandler<GenEventArgs<Weather>> 
    +  <<event>> ChangedToRain : EventHandler<GenEventArgs<Weather>> 
    +  <<event>> ChangedToDrizzle : EventHandler<GenEventArgs<Weather>> 
    +  <<event>> ChangedToSnow : EventHandler<GenEventArgs<Weather>> 
    +  <<event>> ChangedToClear : EventHandler<GenEventArgs<Weather>> 
    +  <<event>> ChangedToStormy : EventHandler<GenEventArgs<Weather>> 
    +  <<event>> ChangedToBlizzard : EventHandler<GenEventArgs<Weather>> 
    +  <<event>> ChangedToFoggy : EventHandler<GenEventArgs<Weather>> 
    +  <<event>> ChangedToHailstorm : EventHandler<GenEventArgs<Weather>> 
    +  <<event>> ChangedToHeatWave : EventHandler<GenEventArgs<Weather>> 
    - Awake() : void
    - Start() : void
    - OnDayChange(sender:object, e:EventArgs) : void
    - OnHourElapsed(sender:object, e:HourElapsedEventArgs) : void
    - OnTimeChangedToDusk(sender:object, e:EventArgs) : void
    - OnTimeChangedToDawn(sender:object, e:EventArgs) : void
    + LN() : string
    + SetWindSpeed(value:float) : void
    + SetCloudCover(value:float) : void
    + SetWindDirection(value:float) : void
    + SetWaterLevel() : void
    + SetWaterLevel(value:float) : void
    + SetAirPressure(value:float) : void
    + SetHumidity(value:float) : void
    + SetWeather() : void
    + SetTemperature(value:float) : void
    - SetWeather(value:Weather) : void
    + {static} MonthToTemperature(month:TimeHandler.Months) : (int, int)
    + {static} WeatherToTemperatureMultiplier(current:Weather) : float
    + {static} WeatherToHumidityMultiplier(current:Weather) : float
    + {static} WeatherToString(current:Weather) : string
}
enum Weather {
    Rain,
    Drizzle,
    Snow,
    Clear,
    Stormy,
    Blizzard,
    Foggy,
    HailStorm,
    HeatWave,
}
enum ClimateZone {
    TropicalRainforest,
    Savannah,
    Steppe,
    Desert,
    Etesian,
    HumidTemperate,
    Sinic,
    HumidContinental,
    TransSiberian,
    SummerDryCold,
    Tundra,
    Ice,
}
ILog <|-- ClimateHandler
ClimateHandler --> "Instance" ClimateHandler
ClimateHandler --> "wind" WindZone
ClimateHandler --> "clouds" Volume
ClimateHandler o-> "zone" ClimateZone
ClimateHandler o-> "weather" Weather
ClimateHandler --> "ui" GUIController
ClimateHandler --> "time" TimeHandler
ClimateHandler +-- Weather
ClimateHandler +-- ClimateZone
class TimeHandler {
    + year : int = 2022
    + month : int = 5
    + day : int = 5
    + hour : int
    + minutes : int
    + timeSpeed : float = 1
    + frameSteps : int = 1
    + realTime : bool = false
    + TimeSpeed : float <<get>>
    +  <<event>> TimeChangedToDawn : EventHandler 
    +  <<event>> TimeChangedToNoon : EventHandler 
    +  <<event>> TimeChangedToAfternoon : EventHandler 
    +  <<event>> TimeChangedToDusk : EventHandler 
    +  <<event>> TimeChangedToNight : EventHandler 
    +  <<event>> TimeChangedToMidnight : EventHandler 
    +  <<event>> TimeChangedToAfternight : EventHandler 
    +  <<event>> TimeHourElapsed : EventHandler<HourElapsedEventArgs> 
    - frameStep : int
    - OnValidate() : void
    - Awake() : void
    - Start() : void
    - Update() : void
    + LN() : string
    + SetTime(hour:int, minutes:int) : void
    + SetDate(dateTime:DateTime) : void
    + SetUpdateSteps(i:int) : void
    + SetTimeSpeed(speed:float) : void
    - OnDawn(sender:object, e:EventArgs) : void
    - OnNoon(sender:object, e:EventArgs) : void
    - OnAfternoon(sender:object, e:EventArgs) : void
    - OnDusk(sender:object, e:EventArgs) : void
    - OnNight(sender:object, e:EventArgs) : void
    - OnMidnight(sender:object, e:EventArgs) : void
    - OnAfternight(sender:object, e:EventArgs) : void
    + CallEventsFromTime(oldHourTime:int, hourTime:int) : void
    + CallEventFromStatus(events:TimeEvents) : EventHandler
}
class HourElapsedEventArgs {
    + Hour : int <<get>>
    + OverNoon : bool <<get>>
    + HourElapsedEventArgs(overNoon:int)
}
enum Seasons {
    Spring,
    Summer,
    Autumn,
    Winter,
    WetSeason,
    DrySeason,
}
enum TimeEvents {
    Dawn,
    Noon,
    Afternoon,
    Dusk,
    Night,
    Midnight,
    Afternight,
}
enum Months {
    January= 1,
    February,
    March,
    April,
    May,
    June,
    July,
    August,
    September,
    October,
    November,
    December,
}
ILog <|-- TimeHandler
TimeHandler --> "Instance" TimeHandler
TimeHandler --> "sun" Sun
TimeHandler --> "date" DateTime
TimeHandler --> "ui" GUIController
TimeHandler --> "currentState" TimeEvents
TimeHandler --> "LocalTime" DateTime
TimeHandler --> "localTime" DateTime
EventArgs <|-- HourElapsedEventArgs
TimeHandler +-- Seasons
TimeHandler +-- TimeEvents
TimeHandler +-- Months
class WorldController {
    + pointScale : uint = 1
    + highScale : uint = 1
    + seed : int = 1
    + scale : float = 8
    + octave : int = 1
    + persistence : float = 0.4f
    + lacunarity : float = 0.345f
    + showMesh : bool = false
    + showGraph : bool = false
    + spawnPlants : bool = false
    + LN() : string
    - maxHeight : float = 0
    - minHeight : float
    - GenerateGraph(vertices:Vector3[]) : Mesh
    - GenerateColorArray(mesh:Mesh) : void
    - GenerateTriangles() : int[]
    - GenerateUV(mesh:Mesh) : void
    - Generate() : void
    - Start() : void
    - Awake() : void
    + HandleAgents(sender:object, e:EventArgs) : void
    + IteratePlants() : IEnumerator
    + CalcWaterArea(ground:Ground, consume:float) : void
    + UpdateGroundColor(id:int, value:float) : void
    + ActivateGroundTypeColors() : void
    + ActivateHumidity() : void
    + ActivateHeight() : void
    + ActivateTextures() : void
    + Spawn(obj:GameObject) : void
    + Spawn(obj:GameObject, pos:Vector3) : void
    + SpawnPlant(obj:GameObject, pos:Vector3) : void
    + RegisterFloraAgent(agent:FloraAgent) : void
    + RemoveAgent(agent:Agent) : void
}
enum ActiveColor {
    Texture,
    Arid,
    Type,
    Height,
}
ILog <|-- WorldController
WorldController --> "player" PlayerHandler
WorldController --> "Instance" WorldController
WorldController --> "MeshGraph" Graph
WorldController --> "MovementGraph" Graph
WorldController o-> "currentColor" ActiveColor
WorldController --> "timeHandler" TimeHandler
WorldController --> "climateHandler" ClimateHandler
WorldController +-- ActiveColor
class InputProvider {
    + InputProvider()
    + Top() : bool
    + Down() : bool
    + Right() : bool
    + Left() : bool
    + PointerPosition() : Vector2
    + Rotation() : bool
    + Rotate(axis:string) : float
    + Scroll() : float
}
interface IPlayerActions {
    OnMenu(context:InputAction.CallbackContext) : void
    OnScroll(context:InputAction.CallbackContext) : void
    OnRotate(context:InputAction.CallbackContext) : void
    OnPosition(context:InputAction.CallbackContext) : void
    OnFastMove(context:InputAction.CallbackContext) : void
    OnRotation(context:InputAction.CallbackContext) : void
    OnForward(context:InputAction.CallbackContext) : void
    OnBackward(context:InputAction.CallbackContext) : void
    OnLeft(context:InputAction.CallbackContext) : void
    OnRight(context:InputAction.CallbackContext) : void
    OnMainAction(context:InputAction.CallbackContext) : void
    OnMiddleMouse(context:InputAction.CallbackContext) : void
    OnRightClick(context:InputAction.CallbackContext) : void
    OnExit(context:InputAction.CallbackContext) : void
    OnCheating(context:InputAction.CallbackContext) : void
}
class PlayerHandler {
    + LN() : string
    + PlayerName : string = "Jeff"
    + playtime : long = 0
    + money : int = 0
    + quality : int = 0
    + hasWeatherUIUnlocked : bool = false
    + hasTextureViewUnlocked : bool = false
    + hasAridityViewUnlocked : bool = false
    + hasGroundTypeViewUnlocked : bool = false
    + hasHeightViewUnlocked : bool = false
    + rubbishCount : int = 0
    + treeCount : int = 0
    + playerTreeCount : int = 0
    + playerCutTreeCount : int = 0
    + playerFoundIllTreesCount : int = 0
    + soilSampleCount : int = 0
    + hottestTemp : float
    + coldestTemp : float = 40
    + highestQuality : float
    + lowestQuality : float = 100
    + o2Production : float = 0
    + co2Consumption : float = 0
    + waterConsumption : float = 0
    + activateDigging : bool
    + activateWeatherStationBuilding : bool
    + activateTreePlanting : bool
    +  <<event>> GotMoney : EventHandler<GenEventArgs<int>> 
    +  <<event>> SpendMoney : EventHandler<GenEventArgs<int>> 
    +  <<event>> TookSoilExample : EventHandler<GenEventArgs<int>> 
    +  <<event>> FoundIllTrees : EventHandler<GenEventArgs<int>> 
    +  <<event>> CutTrees : EventHandler<GenEventArgs<int>> 
    +  <<event>> PlantedTrees : EventHandler<GenEventArgs<int>> 
    +  <<event>> BuiltWeatherStation : EventHandler 
    +  <<event>> TookSatellitePicture : EventHandler 
    +  <<event>> UnlockedElements : EventHandler 
    + UnlockWeatherUI() : void
    + UnlockHeightView() : void
    + UnlockAridityView() : void
    + UnlockGroundTypeView() : void
    + UnlockTextureView() : void
    + ActivateTree() : void
    + ActivateSoilSample() : void
    + ActivateWeatherStation() : void
    + AddMoney(amount:int) : void
    + RemoveMoney(amount:int) : bool
    + AddRubbish() : void
    + RemoveRubbish() : void
    + AddSoilSample() : void
    + OnPlayerFoundIllTree(s:object, e:EventArgs) : void
    + PlayerRemovedTree() : void
    + RemoveTree(agent:TreeAgent) : void
    + AddPlayerPlantedTree() : void
    + AddTree() : void
    + PlantTree() : void
    + BuildWeatherStation() : void
    + TakeSatellitePicture() : void
    + SpawnObjOnWorld(pos:Vector3) : void
    + UpdateStatisticsValue() : void
    - Start() : void
    - CalcQuality() : void
    - OnTreeClicked(s:object, e:GenEventArgs<TreeAgent>) : void
    - OnTreeCut(s:object, e:GenEventArgs<TreeAgent>) : void
    - OnTemperatureChange(s:object, e:GenEventArgs<float>) : void
    - OnCheating(s:object, e:EventArgs) : void
}
ILog <|-- PlayerHandler
PlayerHandler --> "ui" GUIController
PlayerHandler --> "movement" FreeLookUserInput
PlayerHandler --> "manager" TaskManager
PlayerHandler --> "plant" TreeSpawner
PlayerHandler --> "playerInput" IPlayerActions
class Edge {
    + Edge(start:Node, end:Node)
    - Equals(other:Edge) : bool
    + <<override>> Equals(obj:object) : bool
    + <<override>> GetHashCode() : int
    + GetOtherNode(node:Node) : Node
}
Edge --> "Node" Node
Edge --> "Node2" Node
class Graph {
    # NodeID : int = 0
    + NextID() : int
    + AddNode(pos:Vector3) : bool
    + AddNode(pos:Vector3, node:Node, type:Node.NodeType) : bool
    + AddNode(node:Node) : bool
    + AddNodes(newNodes:IEnumerable<Node>) : bool
    + AddEdge(edge:Edge) : bool
    + AddEdge(start:Node, end:Node) : bool
    + AddEdge(start:Node, end:Vector2?) : bool
    + AddEdge(start:Vector2?, end:Vector2?) : bool
    + AddEdges(newEdges:IEnumerable<Edge>) : void
    + {static} DegreeToDirection(dir:float) : Direction
    + {static} DirectionToAbbr(dir:Direction) : string
    + LN() : string
}
class "SymmetricIntDict`1"<TValue> {
    + <<new>> Add(key:(int, int), value:TValue) : bool
    + Add(key1:int, key2:int, value:TValue) : bool
}
class "SymmetricVectorDict`1"<TValue> {
    + <<new>> Add(key:(Vector2, Vector2), value:TValue) : bool
    + Add(key1:Vector2, key2:Vector2, value:TValue) : bool
}
enum Direction {
    North,
    Up= North,
    NorthEast,
    UpRight= NorthEast,
    East,
    Right= East,
    SouthEast,
    DownRight= SouthEast,
    South,
    Down= South,
    SouthWest,
    DownLeft= SouthWest,
    West,
    Left= West,
    NorthWest,
    UpLeft= NorthWest,
}
class SameNodeError {
    + <<new>> Message : string = "The two nodes for the edge are the same."
}
class DiffNodeType {
    + <<new>> Message : string = "The nodes have different types and should not be connected."
}
ILog <|-- Graph
Graph o-> "edges<Edge>" "SymmetricVectorDict`1"
Graph --> "Edges<Edge>" "SymmetricVectorDict`1"
"Dictionary`2" "<(int, int),TValue>" <|-- "SymmetricIntDict`1"
"Dictionary`2" "<(Vector2, Vector2),TValue>" <|-- "SymmetricVectorDict`1"
Graph +-- Direction
Graph +-- SameNodeError
class Ground {
    - <<readonly>> sand : float
    - <<readonly>> silt : float
    - <<readonly>> clay : float
    - <<readonly>> loam : float
    - currentWater : float = 0
    - waterCapacity : int = 0
    + WaterCapacity : int <<get>>
    + CurrentWater : float <<get>>
    + Sand : float <<get>>
    + Silt : float <<get>>
    + Clay : float <<get>>
    + Loam : float <<get>>
    + Ground(world:WorldController, node:Node, sand:float, clay:float, silt:float, loam:float)
    + RefWorld() : WorldController
    + InitWater(value:float) : void
    + SetWater(value:float) : void
    + GetWater(consume:float) : bool
    + CalcTypeColor() : Color
    + {static} GroundWaterCapacity(type:GroundTypes) : int
    + {static} GroundColor(type:GroundTypes) : Color32
    + {static} GroundTypeToString(type:GroundTypes) : string
}
enum GroundTypes {
    Clay,
    Silt,
    Loam,
    Sand,
}
Ground --> "world" WorldController
Ground --> "node" Node
Ground --> "Node" Node
Ground +-- GroundTypes
class Node {
    - <<const>> Precision : double = 0.01
    + <<readonly>> ID : int
    + Node(id:int, pos:Vector3, nodeType:NodeType)
    + Up(node:Node) : bool
    + Up() : bool
    + UpRight(node:Node) : bool
    + UpRight() : bool
    + Right(node:Node) : bool
    + Right() : bool
    + DownRight(node:Node) : bool
    + DownRight() : bool
    + Down(node:Node) : bool
    + Down() : bool
    + DownLeft(node:Node) : bool
    + DownLeft() : bool
    + Left(node:Node) : bool
    + Left() : bool
    + UpLeft(node:Node) : bool
    + UpLeft() : bool
    + QueryEdges(dir:Graph.Direction, node:Node) : bool
    + Direction(dir:Graph.Direction, v:Vector3) : bool
    + {static} E(a:Vector2, b:Vector2) : bool
    + {static} GT(a:Vector3, b:Vector3) : bool
    - Equals(other:Node) : bool
    + <<override>> Equals(obj:object) : bool
    + <<override>> GetHashCode() : int
    + NodeColor() : Color
    + {static} NodeColor(nodeType:NodeType) : Color
}
enum NodeType {
    Mesh,
    Graph,
}
Node --> "type" NodeType
Node +-- NodeType
class BodyBehaviour {
    +  <<event>> OnSense : IColliderBehaviour.TriggerHandler 
    +  <<event>> OnRadiusSense : IColliderBehaviour.TriggerHandler 
    +  <<event>> OnRadiusExitSense : IColliderBehaviour.TriggerHandler 
    + OnTriggerEnter(other:Collider) : void
    + OnTriggerStay(other:Collider) : void
    + OnTriggerExit(other:Collider) : void
}
IColliderBehaviour <|-- BodyBehaviour
class HearBehaviour {
    +  <<event>> OnSense : IColliderBehaviour.TriggerHandler 
    +  <<event>> OnRadiusSense : IColliderBehaviour.TriggerHandler 
    +  <<event>> OnRadiusExitSense : IColliderBehaviour.TriggerHandler 
    + OnTriggerEnter(other:Collider) : void
    + OnTriggerStay(other:Collider) : void
    + OnTriggerExit(other:Collider) : void
}
IColliderBehaviour <|-- HearBehaviour
class SeeBehaviour {
    + OnTriggerEnter(other:Collider) : void
    + OnTriggerStay(other:Collider) : void
    + OnTriggerExit(other:Collider) : void
    +  <<event>> OnSense : IColliderBehaviour.TriggerHandler 
    +  <<event>> OnRadiusSense : IColliderBehaviour.TriggerHandler 
    +  <<event>> OnRadiusExitSense : IColliderBehaviour.TriggerHandler 
}
IColliderBehaviour <|-- SeeBehaviour
class SmellBehaviour {
    +  <<event>> OnSense : IColliderBehaviour.TriggerHandler 
    +  <<event>> OnRadiusSense : IColliderBehaviour.TriggerHandler 
    +  <<event>> OnRadiusExitSense : IColliderBehaviour.TriggerHandler 
    + OnTriggerEnter(other:Collider) : void
    + OnTriggerStay(other:Collider) : void
    + OnTriggerExit(other:Collider) : void
}
IColliderBehaviour <|-- SmellBehaviour
class Conifer {
    + Conifer(ground:Ground)
    - Start() : void
    + <<override>> LN() : string
}
TreeAgent <|-- Conifer
class Cypress {
    + Cypress(ground:Ground)
    - Start() : void
    + <<override>> LN() : string
}
TreeAgent <|-- Cypress
class Grass {
    + Grass(ground:Ground)
    + <<override>> LN() : string
}
FloraAgent <|-- Grass
class Oak {
    + Oak(ground:Ground)
    + <<override>> LN() : string
}
TreeAgent <|-- Oak
class Pine {
    + Pine(ground:Ground)
    - Start() : void
    + <<override>> LN() : string
}
TreeAgent <|-- Pine
class Privet {
    + Privet(ground:Ground)
    - Start() : void
    + <<override>> LN() : string
}
FloraAgent <|-- Privet
class SetSunLocation {
    + Start() : void
    + SetLocation() : IEnumerator
    + LN() : string
}
ILog <|-- SetSunLocation
SetSunLocation --> "sun" Sun
class Sun {
    - longitude : float
    - latitude : float
    - Start() : void
    + SetLocation(lon:float, lat:float) : void
    + SetPosition() : void
    + EnableSun() : void
    + EnableMoon() : void
    + SetLightSource(events:TimeEvents) : Action
    - OnDawn(sender:object, e:EventArgs) : void
    - OnNight(sender:object, e:EventArgs) : void
    + LN() : string
}
ILog <|-- Sun
Sun --> "timeHandler" TimeHandler
class Rubbish {
    + Start() : void
    + <<override>> LN() : string
    + <<override>> MouseClick() : void
    + <<override>> MouseOver() : void
    + <<override>> MouseExit() : void
}
WorldObject <|-- Rubbish
Rubbish --> "player" PlayerHandler
class BushSpawner {
    + BushSpawner()
    + <<override>> SpawnOptions(newPrefab:GameObject, hit:RaycastHit) : void
}
Spawner <|-- BushSpawner
class GrassSpawner {
    + GrassSpawner()
    + <<override>> SpawnOptions(newPrefab:GameObject, hit:RaycastHit) : void
}
Spawner <|-- GrassSpawner
class RubbishSpawn {
    + RubbishSpawn()
    + <<override>> SpawnOptions(newPrefab:GameObject, hit:RaycastHit) : void
}
Spawner <|-- RubbishSpawn
class TreeSpawner {
    + deceaseCounter : int = 0
    + TreeSpawner()
    + <<override>> SpawnOptions(newPrefab:GameObject, hit:RaycastHit) : void
    + GetRandomTree() : GameObject
}
Spawner <|-- TreeSpawner
class FreeLookUserInput {
    + borderScroll : bool
    + orbitY : bool = true
    + blockWorldInteractions : bool = false
    + scrollSpeed : float = 0.5f
    + normalSpeed : float = 50
    + fastSpeed : float = 80
    + movementTime : float = 2
    + movementSpeed : float = 50
    + minZoom : float = 80f
    + maxZoom : float = 260f
    + borderThickness : float = 12.5f
    + cameraDistance : float = 10f
    + orbitFOV : float = 75
    +  <<event>> CallW : EventHandler<GenEventArgs<bool>> 
    +  <<event>> CallA : EventHandler<GenEventArgs<bool>> 
    +  <<event>> CallS : EventHandler<GenEventArgs<bool>> 
    +  <<event>> CallD : EventHandler<GenEventArgs<bool>> 
    +  <<event>> CallRotation : EventHandler<GenEventArgs<bool>> 
    +  <<event>> TreeWasHit : EventHandler<GenEventArgs<TreeAgent>> 
    +  <<event>> DoCheating : EventHandler 
    - freeLookActive : bool = false
    - newFreeLookActive : bool
    - hasFocus : bool = true
    - inWindow : bool = true
    - inGUI : bool = false
    - OnApplicationFocus(changedFocus:bool) : void
    + LN() : string
    + OnUIToggle(s:object, e:GenEventArgs<bool>) : void
    - Awake() : void
    - OnEnable() : void
    - OnDisable() : void
    - Update() : void
    - OnMiddleClickHold() : void
    - OnMiddleCLickLeft() : void
    - OnLeftClick(e:InputAction.CallbackContext) : void
    - OnMiddleClick(e:InputAction.CallbackContext) : void
    - OnRightClick(e:InputAction.CallbackContext) : void
    - OnCheating(e:InputAction.CallbackContext) : void
    + OnESC() : void
    - GetInputAxis(axisName:string) : float
    - FasterMovement(e:InputAction.CallbackContext) : void
    - HandleMovementInput() : void
    - OnWindowPosition() : void
}
ILog <|-- FreeLookUserInput
FreeLookUserInput --> "UIEvents" EventSystem
FreeLookUserInput --> "input" InputProvider
class GUIButtonPanelController {
    +  <<event>> textureViewActivated : EventHandler 
    +  <<event>> heightViewActivated : EventHandler 
    +  <<event>> aridityViewActivated : EventHandler 
    +  <<event>> groundTypeiewActivated : EventHandler 
    + ActivateTextureButton() : void
    + ActivateHeightButton() : void
    + ActivateAridityButton() : void
    + ActivateGroundButton() : void
}
class GUIController {
    + PlayDigging() : void
    + PlayPlace() : void
    + PlayWood() : void
    + PlayMetal() : void
    + PlaySuccess() : void
    + PlayClick() : void
    + PlayError() : void
    + PlayBackgroundSound(clip:AudioClip) : void
    + UnlockButtonPanel() : void
    + {static} CloseGame() : void
}
GUIController --> "guiWeatherController" GUIWeatherController
GUIController --> "guiResourcesController" GUIResourcesController
GUIController --> "guiStatisticsController" GUIStatisticsController
GUIController --> "guiButtonPanelController" GUIButtonPanelController
GUIController --> "guiWikiController" GUIWikiController
GUIController --> "guiHelpController" GUIHelpController
GUIController --> "guiTaskController" GUITaskController
GUIController --> "guiOptionsController" GUIOptionsPanelController
GUIController --> "guiMessageController" GUIMessageController
GUIController --> "guiPlaceableController" GUIPlaceableController
GUIController --> "guiViewerController" GUIViewerController
GUIController --> "guiSurveyController" GUISurveyController
GUIController --> "guiLegendController" GUILegendController
GUIController --> "guiErrorHandlingController" GUIErrorHandlingController
class GUIDialogBoxController {
    + OnToggle(s:object, e:GenEventArgs<(string title, string text, Action callPos, Action callNeg)>) : void
    + Accept() : void
    + Decline() : void
}
PopupBehaviour <|-- GUIDialogBoxController
class GUIErrorHandlingController {
    + PlaceError(err:string) : void
}
PopupBehaviour <|-- GUIErrorHandlingController
class GUIHelpController {
    + OnTaskChange(s:object, e:GenEventArgs<string>) : void
}
PopupBehaviour <|-- GUIHelpController
class GUILegendController {
    + ShowAridLegend() : void
    + ShowTypeLegend() : void
    + ShowHeightLegend() : void
}
PopupBehaviour <|-- GUILegendController
class GUIMainMenu {
    - selResIndex : int = 2
    - fps : int = 60
    - selModeIndex : int = 0
    - wc : int
    + {static} Exit() : void
    + SwitchToGerman() : void
    + SwitchToEnglish() : void
    + NextWindow() : void
    + PreviousWindows() : void
    + ChangeWindowMode() : void
    + ChangeFPS() : void
    + ChangeResolution() : void
    + ChangeQualityPreset() : void
    + StartLoading() : void
    + PlayClick() : void
    - LoadSimulationAsync() : IEnumerator
    - SetWindow() : void
}
class GUIMessageController {
    + OnToggle(s:object, e:GenEventArgs<(string, string)>) : void
}
PopupBehaviour <|-- GUIMessageController
class GUIOptionsPanelController {
    + ActivateWeatherButton() : void
    + CloseApp() : void
}
GUIOptionsPanelController --> "guiDialogBoxController" GUIDialogBoxController
class GUIPlaceableController {
    + UnlockDigButton() : void
    + UnlockWeatherButton() : void
    + UnlockSatelliteButton() : void
    + UnlockTreePlanting() : void
}r
class GUIResourcesController {
    + OnMoneyChange(e:GenEventArgs<string>) : void
    + OnQualityChange(e:GenEventArgs<string>) : void
    + OnTimeChange(e:GenEventArgs<string>) : void
    + PosValues() : void
    + NegValues() : void
    + NoMoney() : void
    - ChangeTextBack() : IEnumerator
    - FadeText() : IEnumerator
}
class GUIStatisticsController {
    + OnCo2Change(e:GenEventArgs<string>) : void
    + OnO2Change(e:GenEventArgs<string>) : void
    + OnWaterConsumptionChange(e:GenEventArgs<string>) : void
    + OnPollutionChange(e:GenEventArgs<string>) : void
    + OnApprovalChange(e:GenEventArgs<string>) : void
    + OnMinTempChange(e:GenEventArgs<string>) : void
    + OnMaxTempChange(e:GenEventArgs<string>) : void
}
PopupBehaviour <|-- GUIStatisticsController
class GUISurveyController {
    + knowGamification : bool
    + imagineGamification : string
    + ageArea : int
    + opinionToApp : string
    + teachingScore : int
    + funScore : int
    + systemRequirementsScore : int
    + fancyGraphicScore : int
    + realisticSimulationScore : int
    + nonRealisticSimulationScore : int
    + tooEasy : bool
    + shareHardware : bool
    + shareLogs : bool
    - wc : int
    + ActivateSurvey() : void
    + OpenDialogBoxClose() : void
    + NextWindow() : void
    + PreviousWindows() : void
    + Over18() : void
    + NotOver18() : void
    + KnowGamification() : void
    + NotKnowGamification() : void
    + SetImagineGamification(s:TMP_InputField) : void
    + SetAgeArea(d:TMP_Dropdown) : void
    + SetOpinionToApp(s:TMP_InputField) : void
    + SetTeaching(i:int) : void
    + SetFun(i:int) : void
    + SetSystemRequirements(i:int) : void
    + SetFancyGraphics(i:int) : void
    + SetRealisticSimulation(i:int) : void
    + SetNonRealisticSimulation(i:int) : void
    + TooEasy() : void
    + NotTooEasy() : void
    + ShareHardware() : void
    + ShareNoHardware() : void
    + ShareLogs() : void
    + ShareNoLogs() : void
}
PopupBehaviour <|-- GUISurveyController
GUISurveyController --> "guiDialogBoxController" GUIDialogBoxController
class GUITaskController {
    + OnTaskChange(s:object, e:GenEventArgs<(string, string)>) : void
    + UpdateProgress(s:object, e:GenEventArgs<string>) : void
}
class GUIViewerController {
    +  <<event>> treeCutClicked : EventHandler<GenEventArgs<TreeAgent>> 
    +  <<event>> foundIllTree : EventHandler 
    + OpenViewer(treeAgent:TreeAgent) : void
    + ResetColor() : void
    + ChangeMat(treeTrans:Transform, ret:bool) : void
    + CutTreeButtonPressed() : void
}
PopupBehaviour <|-- GUIViewerController
class GUIWeatherController {
    + OnTempChange(e:GenEventArgs<string>) : void
    + OnTempFeelChange(e:GenEventArgs<string>) : void
    + OnHumChange(e:GenEventArgs<string>) : void
    + OnPressChange(e:GenEventArgs<string>) : void
    + OnWeatherChange(e:GenEventArgs<string>) : void
    + OnWindSpChange(e:GenEventArgs<string>) : void
    + OnWindDirChange(e:GenEventArgs<string>) : void
    + OnCloudCoverChange(e:GenEventArgs<string>) : void
    + OnRainPosChange(e:GenEventArgs<string>) : void
}
PopupBehaviour <|-- GUIWeatherController
class GUIWikiController {
    + OnMoneyChange(e:GenEventArgs<string>) : void
}
interface ITask {
    + ActivateTask(manager:TaskManager) : void
    + Succeeded() : void
    + DeactivateTask() : void
    + GetTitle() : string
    + GetDescription() : string
    + TriggerCompletion() : void
}
abstract class Task {
    +  <<event>> TaskComplete : EventHandler 
    + {abstract} GetTaskName : string <<get>>
    + {abstract} ActivateTask(taskManager:TaskManager) : void
    + {abstract} Succeeded() : void
    + {abstract} DeactivateTask() : void
    + GetTitle() : string
    + GetDescription() : string
    + TriggerCompletion() : void
}
ITask <|-- Task
Task --> "manager" TaskManager
class TaskManager {
    + taskCounter : int = 0
    + LN() : string
    + Start() : void
    + TriggerNextTask() : void
    - NextTask() : void
    - OnTaskComplete(sender:object, e:EventArgs) : void
}
ILog <|-- TaskManager
TaskManager --> "world" WorldController
TaskManager --> "climate" ClimateHandler
TaskManager --> "player" PlayerHandler
class RedFoxes {
    + RedFoxes()
    + <<override>> OnConsumption(s:object, e:EventArgs) : void
    + <<override>> OnHandle(world:WorldController) : void
    # <<override>> OnSee(obj:GameObject) : void
    # <<override>> OnSeeRadius(obj:GameObject) : void
    # <<override>> OnSeeRadiusExit(obj:GameObject) : void
    # <<override>> OnHear(obj:GameObject) : void
    # <<override>> OnHearRadius(obj:GameObject) : void
    # <<override>> OnHearRadiusExit(obj:GameObject) : void
    # <<override>> OnSmell(obj:GameObject) : void
    # <<override>> OnSmellRadius(obj:GameObject) : void
    # <<override>> OnSmellRadiusExit(obj:GameObject) : void
    # <<override>> OnFoodFood(obj:GameObject) : void
    + <<override>> LN() : string
}
FaunaAgent <|-- RedFoxes
class Rabbit {
    + Rabbit()
    - baby : int = 0
    - Start() : void
    - Update() : void
    + <<override>> OnConsumption(s:object, e:EventArgs) : void
    + <<override>> OnHandle(world:WorldController) : void
    # <<override>> OnSee(obj:GameObject) : void
    # <<override>> OnSeeRadius(obj:GameObject) : void
    # <<override>> OnSeeRadiusExit(obj:GameObject) : void
    # <<override>> OnHear(obj:GameObject) : void
    # <<override>> OnHearRadius(obj:GameObject) : void
    # <<override>> OnHearRadiusExit(obj:GameObject) : void
    # <<override>> OnSmell(obj:GameObject) : void
    # <<override>> OnSmellRadius(obj:GameObject) : void
    # <<override>> OnSmellRadiusExit(obj:GameObject) : void
    # <<override>> OnFoodFood(obj:GameObject) : void
    - Eat(plant:Agent) : IEnumerator
    - BurnEnergy() : IEnumerator
    + <<override>> LN() : string
}
FaunaAgent <|-- Rabbit
class RabbitBehavior {
    # <<override>> FightAsPack(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # <<override>> Fight(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # <<override>> Flee(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # <<override>> Socialize(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # <<override>> GetGroup(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # <<override>> Breeding(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # <<override>> GetPartner(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # <<override>> Awake(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # <<override>> Sleep(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # <<override>> GetSleepingPlace(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # <<override>> Drink(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # <<override>> GetWater(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # <<override>> Eat(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # <<override>> GetFood(arg:IAgentBehaviour.States) : IAgentBehaviour.States
    # <<override>> GetStatus(arg:IAgentBehaviour.States) : IAgentBehaviour.States
}
HerbivoreBehaviour <|-- RabbitBehavior
class ButtonGuidance {
    + openedHelpUI : bool = false
    + openedStatisticsUI : bool = false
    + <<override>> GetTaskName : string <<get>>
    + <<override>> ActivateTask(manager:TaskManager) : void
    + <<override>> Succeeded() : void
    + <<override>> DeactivateTask() : void
    - OnHelpWindowOpens(sender:object, e:GenEventArgs<bool>) : void
    - OnStatisticsWindowOpens(sender:object, e:GenEventArgs<bool>) : void
    - CheckConditions() : void
}
Task <|-- ButtonGuidance
class CollectRubbish {
    - <<const>> MoneyToGet : int = 500
    + <<override>> GetTaskName : string <<get>>
    + <<override>> ActivateTask(manager:TaskManager) : void
    + <<override>> Succeeded() : void
    + <<override>> DeactivateTask() : void
    - CheckConditions(sender:object, e:GenEventArgs<int>) : void
}
Task <|-- CollectRubbish
class MeasureWeather {
    - builtWeatherStation : bool = false
    - tookSatellitePictures : bool = false
    + <<override>> GetTaskName : string <<get>>
    + <<override>> ActivateTask(manager:TaskManager) : void
    + <<override>> Succeeded() : void
    + <<override>> DeactivateTask() : void
    - OnWeatherStationBuild(sender:object, e:EventArgs) : void
    - OnSatellitePictureTaken(sender:object, e:EventArgs) : void
    - CheckConditions() : void
}
Task <|-- MeasureWeather
class MovementTest {
    + usedW : bool = false
    + usedA : bool = false
    + usedS : bool = false
    + usedD : bool = false
    + usedScrollWheel : bool = false
    + <<override>> GetTaskName : string <<get>>
    + <<override>> ActivateTask(manager:TaskManager) : void
    + <<override>> Succeeded() : void
    + <<override>> DeactivateTask() : void
    - ResetBool() : IEnumerator
    - CheckUsedW(sender:object, e:GenEventArgs<bool>) : void
    - CheckUsedA(sender:object, e:GenEventArgs<bool>) : void
    - CheckUsedS(sender:object, e:GenEventArgs<bool>) : void
    - CheckUsedD(sender:object, e:GenEventArgs<bool>) : void
    - CheckUsedScrollWheel(sender:object, e:GenEventArgs<bool>) : void
    - CheckConditions() : void
}
Task <|-- MovementTest
class SoilSamples {
    - <<const>> sampleCount : int = 10
    + <<override>> GetTaskName : string <<get>>
    + <<override>> ActivateTask(manager:TaskManager) : void
    + <<override>> Succeeded() : void
    + <<override>> DeactivateTask() : void
    - CheckConditions(sender:object, e:GenEventArgs<int>) : void
}
Task <|-- SoilSamples
class TreeMission {
    - <<const>> FindIllTrees : int = 5
    - <<const>> PlantTrees : int = 5
    - foundIllTrees : int = 0
    - plantTrees : int = 0
    - illTrees : bool = false
    - plantedTrees : bool = false
    + <<override>> GetTaskName : string <<get>>
    + <<override>> ActivateTask(manager:TaskManager) : void
    + <<override>> Succeeded() : void
    + <<override>> DeactivateTask() : void
    - OnIllTrees(sender:object, e:GenEventArgs<int>) : void
    - OnPlantedTrees(sender:object, e:GenEventArgs<int>) : void
    - CheckConditions() : void
}
Task <|-- TreeMission
class ViewGuidance {
    + openedAridityView : bool = false
    + openedHeightView : bool = false
    + openedTypeView : bool = false
    + <<override>> GetTaskName : string <<get>>
    + <<override>> ActivateTask(manager:TaskManager) : void
    + <<override>> Succeeded() : void
    + <<override>> DeactivateTask() : void
    - OnAridityViewOpens(sender:object, e:EventArgs) : void
    - OnHeightViewOpens(sender:object, e:EventArgs) : void
    - OnTypeViewOpens(sender:object, e:EventArgs) : void
    - CheckConditions() : void
}
Task <|-- ViewGuidance
@enduml
